# app info config
spring:
  application:
    name: bank-account
  datasource:
    url: jdbc:h2:file:./data/test;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=FALSE;INIT=CREATE SCHEMA IF NOT EXISTS PUBLIC
    username: sa
    password:
    driver-class-name: org.h2.Driver
  kafka:
    bootstrap-servers: localhost:9092
  jpa:
    hibernate:
      ddl-auto: update
      naming:
        physical-strategy: org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy
    database-platform: org.hibernate.dialect.MySQL5InnoDBDialect
    show-sql: false

# web config
server:
  port: 8080

# log config
logging.config: classpath:logback.xml

# 内存数据库管理页面
spring.h2:
  console:
    path: /h2-console
    enabled: true
    settings:
      web-allow-others: true

# phoenix
quantex:
  phoenix:
    routers:
      - message: com.iquantex.samples.account.coreapi.Hello$HelloCmd
        dst: bank-account/EA/Hello
      - message: com.iquantex.samples.account.coreapi.AccountAllocateCmd
        dst: bank-account/EA/BankAccount
    server:
      name: ${spring.application.name}
      mq:
        type: kafka
        address: embedded
        subscribes:
          - topic: bank-account
      event-store:
        driver-class-name: org.h2.Driver
        data-sources:
          - url: jdbc:h2:file:./data/test;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=FALSE;INIT=CREATE SCHEMA IF NOT EXISTS PUBLIC
            username: sa
            password:
    client:
      name: ${spring.application.name}-client
      mq:
        type: kafka
        address: embedded
    event-publish:
      enabled: true
      manager-driver: org.h2.Driver
      manager-data-source:
        url: jdbc:h2:file:./data/test;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=FALSE;INIT=CREATE SCHEMA IF NOT EXISTS PUBLIC
        username: sa
        password:
      mq-address: embedded
      mq-type: kafka
      batch-size: 32
      buffer-queue-size: 32
      tasks:
        - name: bank-account-event-pub
          subscription:
            - BankAccount
          target-topic: bank-account-event-pub

# eureka  config
service-center:
  url: localhost:7070
eureka:
  client:
    enabled: false
    serviceUrl:
      defaultZone: http://${service-center.url}/eureka/
    fetch-registry: true
    register-with-eureka: true
  instance:
    prefer-ip-address: true
    appname: ${spring.application.name}
